# This code is closely related to paper: https://www.nature.com/articles/s41586-018-0151-x
import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt
import math
import scipy.constants as Cs
import datetime
import os

now = datetime.datetime.now()
if not os.path.exists("/home/xia/Bin/%s/"%(now.strftime("%m%d"))):
    os.makedirs("/home/xia/Bin/%s/"%(now.strftime("%m%d")))

N_z = 1100 # 11000 # 1100000 goodenough 1% error
z_max = 1100
dz = z_max/N_z # 0.001#goodenough 1% error

H0 = 2.33e-18 # s^-1; 7.36337031e-5 /Myear; # 72 km/s/Mpc
Omega_Lambda_0 = 0.690 # cosmic density parameter for dark energy
Omega_r_0 = 5e-5 # cosmic density parameter for non-relativistic matter
Omega_b_0 = 0.037# 0.0482 # ordinary (baryonic) matter energy density
Omega_dm_0 = 0.258 # dark matter energy density

Omega_M_0 = Omega_b_0 + Omega_dm_0 # cosmic density parameter for non-relativistic matter
Omega_0 = Omega_Lambda_0 + Omega_M_0 + Omega_r_0 # total density parameter at the present time

rho_crit_0 = 1e-26 # kg/m^3 from https://astronomy.swin.edu.au/cosmos/c/Critical+Density
rho_b_0 = Omega_b_0 * rho_crit_0
rho_d_0 = Omega_dm_0 * rho_crit_0

f_He = 0.08 # n_He/n_H
m_chi = 1.6e-11 # 100MeV #4.8e-13 # J; 3 MeV
epsilon = 1e-6 # e_chi/e: DM mini-charge in units of the electron charge
f_dm = 1e-2

T_b = 2.73*(z_max+1) # K
T_chi = 0 # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  K     2.73*(z_max+1) #
x_e = 2e-4 #!!!!!!!!!!!!!!!!!!!!!!!!!!!!1 # 
v_chi_b = 29000 # m/s; 29.0 km/s root mean squared velocity

E_0 = -2.1789602e-18 # J; -13.6 eV

recombination_factor = 0.8 # !!!!!!!!!!!!!!! not a constant


# define functions:
def Hubble_parameter(z):
    H = H0*np.sqrt(Omega_Lambda_0+(1-Omega_0)*(1+z)**2+Omega_M_0*(1+z)**3+Omega_r_0*(1+z)**4)
    return H

def u_th(m_t):
    u_th = np.sqrt(Cs.k*(T_b/m_t + T_chi/m_chi))
    #print(u_th)
    return u_th

def F(r_t):
    F = math.erf(r_t/np.sqrt(2)) - np.sqrt(2/np.pi)*r_t*math.exp(-r_t**2 / 2)
    return F

def r_t(m_t):
    r_t = v_chi_b/u_th(m_t)
    return r_t

def part_eq8_b(z,m_t):
    part_eq8_b = (m_chi*m_t/(m_chi + m_t)**2)*(sigma_t_mean_0(z,m_t)/u_th(m_t))*(np.sqrt(2/np.pi)*(math.exp(-r_t(m_t)**2 /2)/u_th(m_t)**2)*Cs.k*(T_chi - T_b) + m_chi*F(r_t(m_t))/r_t(m_t))
    #print(part_eq8_b)
    return part_eq8_b

def part_eq8_chi(z,m_t):
    part_eq8_chi = (m_chi*m_t/(m_chi + m_t)**2)*(sigma_t_mean_0(z,m_t)/u_th(m_t))*(np.sqrt(2/np.pi)*(math.exp(-r_t(m_t)**2 /2)/u_th(m_t)**2)*Cs.k*(T_b - T_chi) + m_t*F(r_t(m_t))/r_t(m_t))
    return part_eq8_chi

def Q_b_rate(z):
    Q_b_rate = n_chi(z)*(x_e/(1+f_He))*(part_eq8_b(z,Cs.m_e)+part_eq8_b(z,Cs.m_p)) / Cs.k# * Cs.c**4
    #print(Q_b_rate)
    return Q_b_rate

def n_H(z):
    n_H = 2e-1*(1+z)**3 # m^-3; 2e-7*(1+z)**3 cm^-3. https://www.uio.no/studier/emner/matnat/astro/AST4320/h14/beskjeder/combinednotesiipostmidterm.pdf
    #print('n_H')
    return n_H

def Q_chi_rate(z):
    Q_chi_rate = n_H(z)*(x_e/(1+f_He))*(part_eq8_chi(z,Cs.m_e)+part_eq8_chi(z,Cs.m_p)) / Cs.k# * Cs.c**4
    #print(Q_chi_rate)
    return Q_chi_rate

def Gamma_C(z):
    # attention for unit!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    Gamma_C = (8*Cs.physical_constants["Thomson cross section"][0]*Cs.Stefan_Boltzmann*T_gamma(z)**4*x_e)/(3*(1+f_He)*Cs.m_e*Cs.c**2) #* Cs.k**4 / (Cs.hbar*Cs.c)**3
    return Gamma_C

def T_gamma(z):
    T_gamma = 2.73*(1+z)
    return T_gamma

def sigma_t_mean_0(z,m_t):
    sigma_t_mean_0 = (2*np.pi*Xi(z)*(Cs.c*Cs.hbar*Cs.alpha*epsilon)**2)/(mu_chi_t(m_t)**2)# * Cs.c**4) #*v_chi_b**4) #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    print(sigma_t_mean_0)
    return sigma_t_mean_0

def mu_chi_t(m_t):
    mu_chi_t = m_t*m_chi/(m_t+m_chi)
    return mu_chi_t

def Xi(z):
    #Xi = np.log((9*(T_b)**3)/(4*np.pi*epsilon**2*(Cs.alpha)**3*x_e*n_H(z)))
    Xi = np.log((9*(T_b*Cs.k)**3)/(4*np.pi*epsilon**2*(Cs.alpha*Cs.hbar*Cs.c)**3*x_e*n_H(z)))
    return Xi

def D_part(z,m_t):
    D_part = sigma_t_mean_0(z,m_t)*((m_chi*n_chi(z)+rho_b(z))/(m_chi+m_t))*((m_t*n_H(z))/(rho_b(z)))*(F(r_t(m_t))/v_chi_b**2) #* Cs.c**4
    # infinity here !!!!!!!!!!!!!!!
    return D_part

def D(z):
    D = D_part(z,Cs.m_e) + D_part(z,Cs.m_p)
    return D

def n_chi(z):
    n_chi = f_dm*rho_d(z)/m_chi
    #print(n_chi)
    return n_chi

def rho_b(z):
    rho_b = rho_b_0*(1+z)**3 # w = p/rho = 0.0
    return rho_b

def rho_d(z):
    rho_d = rho_d_0*(1+z)**3 # w = p/rho = 0.0
    return rho_d

def A_B(z):
    'effective case B recombination coefficient; unit: m^3 sec^-1'
    A_B = 2.84e-19 / np.sqrt(T_gamma(z)*1e-4) # m^3/s; 2.84*10**-13 / np.sqrt(T_gamma(z)*1e-4) # Peebles 1968
    return A_B

def B_B(z):
    B_B = A_B(z)*np.exp(E_0/(4*Cs.k*T_gamma(z)))*(2*np.pi*Cs.m_e*Cs.k*T_gamma(z))**1.5 / Cs.h**3
    return B_B

def derivatives2z(initial, z):
    global T_b, T_chi, x_e, v_chi_b
    T_b, T_chi, x_e, v_chi_b = initial
    H = Hubble_parameter(z)

    dT_chi2dz = (-2*H*T_chi + 2/3*Q_chi_rate(z))/(-H*(1+z))
    dT_b2dz = (-2*H*T_b + Gamma_C(z)*(T_gamma(z)-T_b) + 2/3*Q_b_rate(z))/(-H*(1+z))
    dv_chi_b2dz = (-H*v_chi_b - D(z))/(-H*(1+z))
    dx_e2dz = (-recombination_factor*(n_H(z)*A_B(z)*x_e**2-4*(1-x_e)*B_B(z)*np.exp(3*E_0/(4*Cs.k*T_gamma(z)))))/(-H*(1+z))

    return [dT_b2dz, dT_chi2dz, dx_e2dz, dv_chi_b2dz]


z_array = np.arange(z_max,0.0-dz,-dz)

thermal_evolution = odeint(derivatives2z, [T_b, T_chi, x_e, v_chi_b], z_array)

T_b_evolution = thermal_evolution[:,0]
T_chi_evolution = thermal_evolution[:,1]
x_e_evolution = thermal_evolution[:,2]
v_chi_b_evolution = thermal_evolution[:,3]

fig = plt.figure(figsize=(10, 6))

ax1 = fig.add_subplot(121)
ax1.plot(z_array, T_b_evolution, label = r'$T_b$', c = 'red', linestyle='--')
ax1.plot(z_array, T_chi_evolution, label = r'$T_\chi$', c = 'red', linestyle='-.')
ax1.plot(z_array, 2.73248182*(z_array+1), label = r'$T_\gamma$', c = 'grey', linestyle = '-', linewidth=0.5)
ax1.plot(z_array, 0.00247956*(z_array+1)**2, label = 'quadratic', c = 'black', linestyle = '-', linewidth=0.5)
ax1.set_xlabel(r'z')
ax1.set_ylabel(r'$T\,(\,K\,)$')
ax1.set_xscale("log")
ax1.set_yscale("log")
ax1.legend()
#ax1.title('thermal evolution of the DM and baryon fluids')


ax2 = fig.add_subplot(122)
lns2 = ax2.plot(z_array, v_chi_b_evolution*10**-3, label = r'$v_{\chi\,b}$', c = 'red')
ax2.set_xlabel(r'z')
ax2.set_ylabel(r'$v_{\chi\,b}\ (\,km/s\,)$')
#ax2.legend()
#ax2.title('evolution of free-electron fraction x_e')

ax3 = ax2.twinx()
#ax3.plot(1,2,2)
lns3 = ax3.plot(z_array, x_e_evolution, label = r'$x_e$', c='blue')
#ax3.set_xlabel(r'z')
ax3.set_ylabel(r'$x_e$')
#ax3.legend()
#ax3.title('evolution of relative velocities')
#ax2.legend()

lns = lns2 + lns3
labs = [l.get_label() for l in lns]
ax2.legend(lns, labs, loc=0)

#plt.suptitle('evolution')
plt.savefig("/home/xia/Bin/%s/%sN_z%s.png"%(now.strftime("%m%d"), now.strftime("%H%M"), N_z))
plt.show()
